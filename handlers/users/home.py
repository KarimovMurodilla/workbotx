import random
import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext

from loader import dp, db, wallet, p2p
from utils.misc.qiwi import Payment
from data.config import QIWI_NUMBER
from states.payment import WithDraw, TopUp
from keyboards.inline import inline_buttons
from keyboards.default import keyboard_buttons




@dp.message_handler(state="*", text = '–û—Ç–º–µ–Ω–∞')
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=keyboard_buttons.main_menu())

    
# –≠—Ö–æ —Ö–µ–Ω–¥–ª–µ—Ä, –∫—É–¥–∞ –ª–µ—Ç—è—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(text = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def home(message: types.Message):
    user_id = message.from_user.id
    balance = db.get_user_balance(user_id)

    await message.answer_photo(
        photo = 'AgACAgIAAxkBAAINXWN3iq0AAbtaS7hZLIxrXL-MfIBH-QACMMExGxc6sUrZu_TK8G6PPAEAAwIAA3kAAysE',
        caption  =  f"–í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance}‚ÇΩ</code>\n\n"
                    "- –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: <code>1—á</code>\n"
                    "  –ó–∞—Ä–∞–±–æ—Ç–∞–ª–∏: <code>0.2‚ÇΩ</code>\n\n"
                    "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
                    f"‚îî <a href='https://t.me/teeessstbot?start={message.from_user.id}'>–ó–∞–∂–º–∏—Ç–µ —á—Ç–æ–± —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</a>",
        reply_markup=inline_buttons.payment()
    )


# ----WithDraw---
@dp.callback_query_handler(lambda c: c.data == 'withdraw')
async def callback_withdraw(c: types.CallbackQuery, state: FSMContext):
    user_id = c.from_user.id
    balance = db.get_user_balance(user_id)
    
    if balance > 0.0:
        await c.answer()
        await WithDraw.step1.set()
        await c.message.answer("–ù–∞  –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥?", 
            reply_markup = keyboard_buttons.cancel())
    
    else:
        await c.answer(show_alert = True, text = "‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
						"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


@dp.message_handler(state = WithDraw.step1)
async def home(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    balance = db.get_user_balance(user_id)
    
    if message.text.isdigit():
        if int(message.text) <= balance:
            async with state.proxy() as data:
                data['user_money'] = message.text
                
                await WithDraw.step2.set()
                await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –Ω–µ–π.")
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
								 "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
							 "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")


@dp.message_handler(state = WithDraw.step2)
async def home(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        recipient = message.text
        user_money = data['user_money']
        comment = (f"{user_id}_{random.randint(1000, 9999)}")
        
        prv_id = Payment.get_card_system(recipient)
        payment_data = {'sum': user_money,
                        'to_card': recipient,
                        'prv_id': prv_id}
        answer_from_qiwi = Payment.send_to_card(payment_data)
        
        try:
            status_transaction = answer_from_qiwi["transaction"]["state"]
            if status_transaction['code'] == "Accepted":
                today = datetime.datetime.today()
                fee_with_commission = int(user_money)+int(user_money)/100*2+50
                balance = db.get_user_balance(user_id)
                new_balance = balance - fee_with_commission
                db.update_balance(user_id, new_balance)
                await message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤.")
        
        except Exception as e:
            print(answer_from_qiwi)
            print(e, type(e))
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç–∞/–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è !")
            
            await state.finish()



# ----Top Up----
@dp.callback_query_handler(lambda c: c.data == 'top_up')
async def callback_top_up(c: types.CallbackQuery, state: FSMContext):
	await c.answer()

	await TopUp.step1.set()
	await c.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.", 
			reply_markup = keyboard_buttons.cancel())
	

@dp.message_handler(state=TopUp.step1)
async def process_top_up(message: types.Message, state: FSMContext):
    
    if message.text.isdigit():
        user_id = message.from_user.id
        user_money = int(message.text)
        comment = (f"{user_id}_{random.randint(1000, 9999)}")
        bill = p2p.bill(amount=user_money, lifetime=15, comment=comment)
        
        await message.answer(f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\n–ö –∑–∞—á–∏—Å–ª–µ–Ω–∏—é:</b> <code>{float(message.text)} ‚ÇΩ</code>", 
            reply_markup = inline_buttons.show_payment(bill_id = bill.bill_id, url = bill.pay_url, price = user_money))
        await state.finish()
    
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏!")


@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def check_payment(c: types.CallbackQuery, state: FSMContext):
    try:
        user_id = c.from_user.id
        ids = c.data[6:].split(',')
        bill = ids[0]
        price = ids[1]
        today = datetime.datetime.today()
        
        if str(p2p.check(bill_id = bill).status) == "PAID":
            balance = db.get_user_balance(user_id)
            new_balance = balance + int(price)
            db.update_balance(user_id, new_balance)
            
            await c.message.delete()
            await c.answer(show_alert = True, text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = keyboard_buttons.main_menu())
            await state.finish()
        
        else:
            await c.answer(show_alert = True, text = "‚ùóÔ∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!")
    
    except Exception as e:
        print(e)
        await c.answer()
        await c.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Ç–µ–∫–ª–∏ —Å—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")



# @dp.message_handler(state="*", content_types=types.ContentTypes.PHOTO)
# async def photo(message: types.Message):
#     print(message.photo[-1].file_id)